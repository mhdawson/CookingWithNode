<!--
Copyright 2016 the project authors as listed in the AUTHORS file.
All rights reserved. Use of this source code is governed by the
license that can be found in the LICENSE file.
-->

<html>
  <head>
    <title><DASHBOARD_TITLE></title>

    <script src="/socket.io/socket.io.js"></script>

    <script>
      socket = new io.connect('<URL_TYPE>://' + window.location.host);

      var meatSelections = "";

      var tasteSelections = new Object();

      socket.on('data', function(data) {
        if (data.type === 'temp') {
          var probe = document.getElementById(data.id);
          if (probe === null) {
            probe = document.createElement('probe');
            probe.id = data.id;
            var tempElement = document.createElement('temp');
            probe.appendChild(tempElement);

            var targetElement = document.createElement('target');
            probe.appendChild(targetElement);

            var deviceElement = document.createElement('device');
            probe.appendChild(deviceElement);
            probe.children[2].innerHTML = 'probe[' + data.id + ']';

            var meatElement = document.createElement('select');
            meatElement.className = 'meat';
            meatElement.innerHTML = meatSelections;
            meatElement.value = data.meat;
            meatElement.onchange = function () {
              socket.emit('new-meat', probe.id, meatElement.value);
            }
            probe.appendChild(meatElement);

            var tasteElement = document.createElement('select');
            tasteElement.className = 'taste';
            tasteElement.innerHTML = tasteSelections[data.meat];
            tasteElement.value = data.taste;
            probe.appendChild(tasteElement);

            var scaleF = document.createElement('scale');
            scaleF.id = 'scaleF';
            scaleF.innerHTML = 'F';
            scaleF.className = 'scaleF';
            probe.appendChild(scaleF);

            var scaleC= document.createElement('scale');
            scaleC.id = 'scaleC';
            scaleC.innerHTML = 'C';
            scaleC.className = 'scaleC';
            probe.appendChild(scaleC);

            var muteElement= document.createElement('mute');
            muteElement.innerHTML = 'mute';
            probe.appendChild(muteElement);

            document.getElementById('temps').appendChild(probe);
          }
          probe.children[0].innerHTML = data.temp;
          probe.children[1].innerHTML = 'Target:' + data.target;
          probe.children[4].innerHTML = tasteSelections[data.meat];
        }
      });

      socket.on('cleanup', function(data) {
        var probe = document.getElementById(data.id);
        if (probe !== null) {
          probe.parentNode.removeChild(probe);
        }
      });

      socket.on('cleanup-all', function() {
        var temps = document.getElementById('temps');
        temps.innerHTML = "";
      });

      socket.on('tastes', function(data) {
        meatSelections = "";
        tasteSelections = new Object();
        targetTemps = data;
        for (let i = 0; i < targetTemps.length; i++ ) {
          meatSelections = meatSelections + '<option id="' + targetTemps[i].name + '">'
                                          + targetTemps[i].name
                                          + '</option>';
          var targTemps = targetTemps[i].temps;
          var tasteSelection = "";
          tasteSelections[targetTemps[i].name] = "";
          for (let j = 0; j < targTemps.length; j++ ) {
            tasteSelection = tasteSelection + '<option id="' + Object.keys(targTemps[j])[0] + '">'
                                            + Object.keys(targTemps[j])[0]
                                            + '</option>';
          }
          tasteSelections[targetTemps[i].name] = tasteSelection;
        }
      });


    </script>

    <style>
      main {
        width: 100%;
        height: 100%;
        top: -100%;
        left: 0;
        margin: 0;
        padding: 0;
      }

      probe {
        width: 100%; 
        height: 100px;
        background-color: ForestGreen;
        border-radius: 25px;
        position: relative;
        display: block;
        margin: 2px;
        border: 2px solid black;
      }

      temp {
        width: 150px; 
        height: 50px; 
        font-size: 40px;
        position: absolute;
        padding: 5px
      }

      target {
        width: 150px; 
        height: 22px; 
        font-size: 20px;
        position: absolute;
        left: 5px;
	top: 51px; 
      }

      device {
        font-size: 12px;
        position: absolute;
        left: 10px;
	top: 74px; 
      }

      .meat {
        width: 140px 
        height: 15px 
        font-size: 15px;
        position: absolute;
        left: 150px;
	top: 2px; 
      }

      .taste {
        width: 140px 
        height: 15px 
        font-size: 15px;
        position: absolute;
        left: 150px;
	top: 26px; 
      }

      .scaleF {
        border-radius: 3px;
        font-size: 10px;
        position: absolute;
        left: 135px;
	top: 27px; 
        background-color: lightgrey;
        padding: 2px;
      }

      .scaleC {
        border-radius: 3px;
        font-size: 10px;
        position: absolute;
        left: 120px;
	top: 27px; 
        background-color: lightgrey;
        padding: 2px;
      }

      mute {
        border-radius: 3px;
        height: 20px 
        font-size: 15px;
        position: absolute;
        left: 91px;
	top: 75px; 
        background-color: lightgrey;
      }

    </style>
  </head>

  <body padding="0", margin="0", width="100%", height = "100%">
    <main id="temps" ></main>
  </body>
</html>
