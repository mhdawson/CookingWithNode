<!--
Copyright 2016 the project authors as listed in the AUTHORS file.
All rights reserved. Use of this source code is governed by the
license that can be found in the LICENSE file.
-->

<html>
  <head>
    <title><DASHBOARD_TITLE></title>

    <script src="/socket.io/socket.io.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.17.0/moment.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.1.4/Chart.min.js"></script>

    <link rel="stylesheet" type="text/css" href="skin.css">

    <script>
      var urlType = '<URL_TYPE>://';
      socket = new io.connect(urlType + window.location.host);

      Chart.defaults.global.legend.display = false;
      Chart.defaults.global.responsive = false;
      Chart.defaults.scale.display = false;
      Chart.defaults.global.elements.line.borderWidth = 4;
      Chart.defaults.global.elements.line.borderColor = 'black';

      var toF = function(temp) {
        return Math.ceil((temp*1.8 + 32));
      }

      var toC = function(temp) {
        return parseFloat(((temp -32)/1.8).toFixed(2));
      }

      var convertTemp = function(scaleC, temp) {
        if (scaleC) {
          return parseFloat(temp.toFixed(2));
        } else {
          return toF(temp);
        }
      }

      var meatSelections = "";

      var tasteSelections = new Object();
      var probesHistory = new Object();

      var muteTimers = new Object();
      var flashMute = function(probeId)  {
        stopFlashMute(probeId);
        muteTimers[probeId] = setInterval(function() {
          var probe = document.getElementById(probeId);
          if (probe.children[7].className === 'mute') {
            probe.children[7].className = 'mute flash';
          } else {
            probe.children[7].className = 'mute';
          }
        }, 1000);
      }

      var stopFlashMute = function(probeId) {
        if (muteTimers[probeId] !== undefined) {
          clearInterval(muteTimers[probeId]);
          muteTimers[probeId] = undefined;
        }
        var probe = document.getElementById(probeId);
        probe.children[7].className = 'mute';
      }

      var soundElems = new Object();
      var playSound = function(probeId, file, repeat) {
        stopSound(probeId);
        soundElems[probeId] = new Audio(urlType + window.location.host + '/' + file);
        if (repeat) {
          soundElems[probeId].addEventListener('ended', function() {
            this.currentTime = 0;
            this.play();
          }, false);
        }
        soundElems[probeId].play();
      }

      var stopSound = function(probeId) {
        if (soundElems[probeId] !== undefined) {
          soundElems[probeId].pause();
          soundElems[probeId].currentTime = 0;
        }
      }

      socket.on('data', function(data) {
        if (data.type === 'temp') {

          var probe = document.getElementById(data.id);
          if (probe === null) {
            probe = document.createElement('probe');
            probe.id = data.id;
            var tempElement = document.createElement('temp');
            probe.appendChild(tempElement);

            var targetElement = document.createElement('target');
            probe.appendChild(targetElement);

            var deviceElement = document.createElement('device');
            probe.appendChild(deviceElement);
            probe.children[2].innerHTML = 'probe[' + data.id + ']';

            var meatElement = document.createElement('select');
            meatElement.className = 'meat';
            meatElement.innerHTML = meatSelections;
            meatElement.value = data.meat;
            meatElement.onchange = function () {
              socket.emit('new-meat', probe.id, meatElement.value);
            }
            probe.appendChild(meatElement);

            var tasteElement = document.createElement('select');
            tasteElement.className = 'taste';
            tasteElement.innerHTML = tasteSelections[data.meat];
            tasteElement.value = data.taste;
            tasteElement.onchange = function () {
              socket.emit('new-taste', probe.id, tasteElement.value);
            }
            probe.appendChild(tasteElement);

            var scaleF = document.createElement('scale');
            scaleF.id = 'scaleF';
            scaleF.innerHTML = 'F';
            if (!data.scaleC) {
              scaleF.className = 'selected scaleF';
            } else {
              scaleF.className = 'scaleF';
            }
            scaleF.onclick = function() {
              socket.emit('scaleC', probe.id, false);
            }
            probe.appendChild(scaleF);

            var scaleC = document.createElement('scale');
            scaleC.id = 'scaleC';
            scaleC.innerHTML = 'C';
            if (scaleC) {
              scaleC.className = 'selected scaleC';
            } else {
              scaleC.className = 'scaleC';
            }
            scaleC.onclick = function() {
              socket.emit('scaleC', probe.id, true);
            }
            probe.appendChild(scaleC);

            var muteElement = document.createElement('mute');
            muteElement.innerHTML = 'mute';
            muteElement.onclick = function() {
              stopSound(probe.id);
              stopFlashMute(probe.id);
            }
            probe.appendChild(muteElement);

            document.getElementById('temps').appendChild(probe);
            var chartDiv = document.createElement('div');
            probe.appendChild(chartDiv);
            var chartElement = document.createElement('canvas');
            chartElement.className = 'chart';
            chartDiv.appendChild(chartElement);
            var chartCtx = chartElement.getContext('2d');
            var tempData = {
                labels: [],
                datasets: [ { strokeColor: 'black',
                              pointBorderColor: 'black',
                              pointBackgroundColor: 'black',
                              data: [] },
                            { strokeColor: 'black',
                              pointColor: 'black',
                              fill:false,
                              data: [] },
                          ]
              };

            if (probesHistory[probe.id]) {
              tempData.labels =  probesHistory[probe.id].timestamps;
              tempData.datasets[0].data =  probesHistory[probe.id].temps;
              tempData.datasets[1].data =  probesHistory[probe.id].targets;
            }

            chartDiv.chartHandle = new Chart(chartCtx, { type: 'line',
                                                         data: tempData,
                                                         options:
                                                           {scales: { yAxes: [{ ticks: { beginAtZero: true}}],
                                                                      xAxes: [{ type: 'time' }] }
                                                         }
                                                       });

            var estimateElement = document.createElement('estimate');
            estimateElement.innerHTML = '5 min';
            probe.appendChild(estimateElement);
          }

          var chart = probe.children[8].chartHandle;
          chart.data.labels.push(data.timestamp);
          chart.data.datasets[0].data.push(data.temp);
          chart.data.datasets[1].data.push(data.target);
          chart.update();

          probe.children[0].innerHTML = convertTemp(data.scaleC, data.temp);
          probe.children[1].innerHTML = 'Target:' + convertTemp(data.scaleC, data.target);
          probe.children[9].innerHTML = data.estimate + ' min';
          probe.children[3].value = data.meat;
          probe.children[4].innerHTML = tasteSelections[data.meat];
          probe.children[4].value = data.taste;
          if ((data.scaleC) && (probe.children[5].className != 'scaleF')) {
            probe.children[5].className = 'scaleF';
            probe.children[6].className = 'selected scaleC';
          } else if ((!data.scaleC) && (probe.children[6].className != 'scaleC')) {
            probe.children[5].className = 'selected scaleF';
            probe.children[6].className = 'scaleC';
          }

          if (data.status === 'warn' ) {
            if (probe.className !== 'warn probe') {
              probe.className = 'warn probe';
              playSound(data.id, 'warnSound', true);
              flashMute(data.id);
            }
          } else if (data.status === 'alert') {
            if (probe.className !== 'alert probe') {
              probe.className = 'alert probe';
              playSound(data.id, 'targetSound', true);
              flashMute(data.id);
            }
          } else {
            probe.className = 'probe';
          }
        }
      });

      socket.on('cleanup', function(data) {
        var probe = document.getElementById(data.id);
        if (probe !== null) {
          stopSound(data.id);
          probe.parentNode.removeChild(probe);
          delete probesHistory[data.id];
        }
      });

      socket.on('cleanup-all', function() {
        var temps = document.getElementById('temps');
        Object.keys(soundElems).forEach(function(key) {
          stopSound(probeId);
        });
        temps.innerHTML = "";
        probesHistory = new Object();
        soundElems = new Object();
      });

      socket.on('tastes', function(data) {
        meatSelections = "";
        tasteSelections = new Object();
        targetTemps = data;
        for (let i = 0; i < targetTemps.length; i++ ) {
          meatSelections = meatSelections + '<option id="' + targetTemps[i].name + '">'
                                          + targetTemps[i].name
                                          + '</option>';
          var targTemps = targetTemps[i].temps;
          var tasteSelection = "";
          tasteSelections[targetTemps[i].name] = "";
          for (let j = 0; j < targTemps.length; j++ ) {
            tasteSelection = tasteSelection + '<option id="' + Object.keys(targTemps[j])[0] + '">'
                                            + Object.keys(targTemps[j])[0]
                                            + '</option>';
          }
          tasteSelections[targetTemps[i].name] = tasteSelection;
        }
      });

      socket.on('chartData', function(data) {
        probesHistory  = data;
      });

    </script>
  </head>

  <body padding="0", margin="0", width="100%", height = "100%">
    <main id="temps" ></main>
    <blank>Waiting for Probes</blank>
    <div id=sound></div>
  </body>
</html>
